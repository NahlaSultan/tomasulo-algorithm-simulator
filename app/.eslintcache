[{"/Users/macbook/Desktop/microProject/app/src/index.js":"1","/Users/macbook/Desktop/microProject/app/src/App.js":"2"},{"size":217,"mtime":1610310402424,"results":"3","hashOfConfig":"4"},{"size":27730,"mtime":1610574791178,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1kej4cm",{"filePath":"9","messages":"10","errorCount":0,"warningCount":87,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/macbook/Desktop/microProject/app/src/index.js",[],["12","13"],"/Users/macbook/Desktop/microProject/app/src/App.js",["14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],"import './Styling.css'\nimport React, { useState,useRef } from 'react'\n\n//we assume that multiplacation takes 4 cycles, add takes 2 and loads/store take 1\nconst mulCycles = 4\nconst addCycles = 2\nconst loadCycles = 1\n\nfunction App() {\n  var [notReady,setNotReady] = useState(true)\n\n  const offsetInputRef = useRef()\n\n\n\n\n  var [op, setop] = useState(\"\")\n  var [destination, setDestination] = useState(\"\")\n  var [j, setj] = useState(\"\")\n  var [k, setk] = useState(\"\")\n\n  //3 reservation stations for adds and subs\n  var [RSAdd, setRSAdd] = useState([\n    {\n      op: \"\", //opcode\n      name: \"a1\", //name of RS \n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\", //address\n      busy: 0 //busy flag\n    }, {\n      op: \"\",\n      name: \"a2\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      busy: 0\n    }, {\n      op: \"\",\n      name: \"a3\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      busy: 0\n    }])\n\n    //2 reservation stations for muls and divs  \n  var [RSMul, setRSMul] = useState([\n    {\n      op: \"\",\n      name: \"m1\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      busy: 0\n    },\n    {\n      op: \"\",\n      name: \"m2\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      busy: 0\n    }\n  ])\n\n  // 3 spots in load buffer\n  var [loadBuffer, setLoadBuffer] = useState([\n    {\n      name: \"l1\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      offset: \"\",\n      busy: 0\n    },\n    {\n      name: \"l2\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      offset:\"\",\n      busy: 0\n    },\n    {\n      name: \"l3\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      offset: \"\",\n      busy: 0\n    }\n  ])\n\n    // 3 spots in store buffer\n  var [storeBuffer, setStoreBuffer] = useState([\n    {\n      name: \"s1\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      offset: \"\",\n      busy: 0\n    },\n\n    {\n      name: \"s2\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      offset: \"\",\n      busy: 0\n    },\n    {\n      name: \"s3\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      offset: \"\",\n      busy: 0\n    }\n  ])\n\n  //register file initial values\n  var [RF, setRF] = useState([\n    {\n      name: \"r1\",\n      qi: \"\",\n      data: \"1\"\n    },\n    {\n      name: \"r2\",\n      qi: \"\",\n      data: \"6\"\n    },\n    {\n      name: \"r3\",\n      qi: \"\",\n      data: \"10\"\n    },\n    {\n      name: \"r4\",\n      qi: \"\",\n      data: \"11\"\n    },\n    {\n      name: \"r5\",\n      qi: \"\",\n      data: \"15\"\n    }\n  ])\n  const array = new Array(100).fill(0);\n\n  var [cycle, setCycle] = useState(1)\n  const [memory, setMemory] = useState(array)\n\n\n  var [instructions, setInstructions] = useState([\n  // {  op: \"add\",\n  //   destination: \"r1\",\n  //   j: \"r2\",\n  //   k: \"r3\",\n  //   issued: false,\n  //   rs: \"\",\n  //   issueCycle: \"\",\n  //   executionBegin: \"\",\n  //   executionEnd: \"\",\n  //   writeCycle: \"\"\n  // },\n  // {\n  //   op: \"sub\",\n  //   destination: \"r4\",\n  //   j: \"r4\",\n  //   k: \"r4\",\n  //   issued: false,\n  //   rs: \"\",\n  //   issueCycle: \"\",\n  //   executionBegin: \"\",\n  //   executionEnd: \"\",\n  //   writeCycle: \"\"\n  // },\n  // {\n  //   op: \"mul\",\n  //   destination: \"r5\",\n  //   j: \"r5\",\n  //   k: \"r1\",\n  //   issued: false,\n  //   rs: \"\",\n  //   issueCycle: \"\",\n  //   executionBegin: \"\",\n  //   executionEnd: \"\",\n  //   writeCycle: \"\"\n  // },\n  // {\n  //   op: \"ld\",\n  //   destination: \"r1\",\n  //   j: \"r2\",\n  //   k: \"\",\n  //   a: \"\",\n  //   offset: \"2\",\n  //   issued: false,\n  //   rs: \"\",\n  //   issueCycle: \"\",\n  //   executionBegin: \"\",\n  //   executionEnd: \"\",\n  //   writeCycle: \"\"\n  // },\n  // {\n  //   op: \"st\",\n  //   destination: \"r1\",\n  //   j: \"r2\",\n  //   k: \"r4\",\n  //   a: \"\",\n  //   offset: \"7\",\n  //   issued: false,\n  //   rs: \"\",\n  //   issueCycle: \"\",\n  //   executionBegin: \"\",\n  //   executionEnd: \"\",\n  //   writeCycle: \"\"\n  // }\n ])\n\n  function chooseOP(e) {\n    setop(e.target.value)\n  }\n  function choosek(e) {\n    setk(e.target.value)\n  }\n\n  function choosej(e) {\n    setj(e.target.value)\n  }\n  function chooseDestination(e) {\n    setDestination(e.target.value)\n  }\n  function getResult(operation, op1, op2, address) {\n    //load,store: vj represents el value of the register that we add to offset\n    //store: vk represets the value we will write to the memory\n    console.log(\"inputs\")\n    console.log(operation)\n    console.log(op1)\n    console.log(op2)\n    console.log(address)\n\n    var o1 = parseFloat(op1)\n    var o2 = parseFloat(op2, 10)\n\n    switch (operation) {\n      case \"add\": return String(o1 + o2) ;\n      case \"sub\": return String(o1 - o2);\n      case \"mul\": return String(o1 * o2);\n      case \"div\": return String(o1 / o2);\n      //not sure\n      case \"ld\": return readMem(address);\n      case \"st\": writeMem(o2, address); break;\n\n    }\n\n  }\n\n\n\n\n\n  function readMem(address) {\n    return String(memory[address])\n  }\n\n  function writeMem(address, value) {\n    const tmpMem = memory\n    tmpMem[address] = value\n    setMemory(tmpMem)\n  }\n\n  function emptystation(rs) {\n    var tmpRSAdd = RSAdd\n    var tmpRSMul = RSMul\n    var loadBuffertmp = loadBuffer\n    var storeBuffertmp = storeBuffer\n    if (rs.startsWith(\"a\")) {\n      for (var j = 0; j < RSAdd.length; j++)\n        if (RSAdd[j].name == rs) {\n          tmpRSAdd[j] = {\n            op: \"\",\n            name: rs,\n            vj: \"\",\n            vk: \"\",\n            qj: \"\",\n            qk: \"\",\n            a: \"\",\n            busy: 0\n          }\n        }\n      setRSAdd([...tmpRSAdd])\n    }\n\n    if (rs.startsWith(\"m\")) {\n      for (var j = 0; j < tmpRSMul.length; j++)\n        if (tmpRSMul[j].name == rs) {\n          tmpRSMul[j] = {\n            op: \"\",\n            name: rs,\n            vj: \"\",\n            vk: \"\",\n            qj: \"\",\n            qk: \"\",\n            a: \"\",\n            busy: 0\n          }\n\n        }\n      setRSMul([...tmpRSMul])\n    }\n\n    if (rs.startsWith(\"s\")) {\n      for (var j = 0; j < storeBuffertmp.length; j++)\n        if (storeBuffertmp[j].name == rs) {\n          storeBuffertmp[j] = {\n            name: rs,\n            vj: \"\",\n            vk: \"\",\n            qj: \"\",\n            qk: \"\",\n            a: \"\",\n            offset: \"\",\n            busy: 0\n          }\n        }\n      setStoreBuffer([...storeBuffertmp])\n\n\n    }\n    if (rs.startsWith(\"l\")) {\n      for (var j = 0; j < loadBuffertmp.length; j++)\n        if (loadBuffertmp[j].name == rs) {\n          loadBuffertmp[j] = {\n            name: rs,\n            vj: \"\",\n            vk: \"\",\n            qj: \"\",\n            qk: \"\",\n            a: \"\",\n            offset: \"\",\n            busy: 0\n          }\n        }\n      setLoadBuffer([...loadBuffertmp])\n\n\n    }\n  }\n\n\n  function getStation(rs) {\n\n    if (rs.startsWith(\"a\")) {\n      console.log(\"in a \")\n      for (var j = 0; j < RSAdd.length; j++)\n        if (RSAdd[j].name == rs) {\n          console.log(\"in a found\")\n          console.log(RSAdd[j])\n\n          return RSAdd[j]\n        }\n    }\n\n    if (rs.startsWith(\"m\")) {\n      for (var j = 0; j < RSMul.length; j++)\n        if (RSMul[j].name == rs) {\n          return RSMul[j]\n        }\n    }\n\n    if (rs.startsWith(\"s\")) {\n      for (var j = 0; j < storeBuffer.length; j++)\n        if (storeBuffer[j].name == rs) {\n          return storeBuffer[j]\n        }\n    }\n\n    if (rs.startsWith(\"l\")) {\n      for (var j = 0; j < loadBuffer.length; j++)\n        if (loadBuffer[j].name == rs) {\n          return loadBuffer[j]\n        }\n    }\n\n\n  }\n\n\n  function updateRS(rs, result) {\n    var tmpRSAdd = RSAdd\n    var tmpRSMul = RSMul\n    var loadBuffertmp = loadBuffer\n    var storeBuffertmp = storeBuffer\n\n\n    for (var j = 0; j < tmpRSAdd.length; j++) {\n      if (tmpRSAdd[j].qj == rs) {\n        tmpRSAdd[j].qj = \"\"\n        tmpRSAdd[j].vj = result\n\n        setRSAdd([...tmpRSAdd])\n      }\n      if (tmpRSAdd[j].qk == rs) {\n        tmpRSAdd[j].qk = \"\"\n        tmpRSAdd[j].vk = result\n\n        setRSAdd([...tmpRSAdd])\n      }\n    }\n\n\n\n\n    for (var j = 0; j < tmpRSMul.length; j++) {\n      if (tmpRSMul[j].qj == rs) {\n        tmpRSMul[j].qj = \"\"\n        tmpRSMul[j].vj = result\n        setRSMul([...tmpRSMul])\n      }\n      if (tmpRSMul[j].qk == rs) {\n        tmpRSMul[j].qk = \"\"\n        tmpRSMul[j].vk = result\n        setRSMul([...tmpRSMul])\n      }\n\n    }\n\n\n    for (var j = 0; j < storeBuffertmp.length; j++) {\n      if (storeBuffertmp[j].qj == rs) {\n        storeBuffertmp[j].qj = \"\"\n        storeBuffertmp[j].vj = result\n        setStoreBuffer([...storeBuffertmp])\n      }\n      if (storeBuffertmp[j].qk == rs) {\n        storeBuffertmp[j].qk = \"\"\n        storeBuffertmp[j].vk = result\n        setStoreBuffer([...storeBuffertmp])\n      }\n\n    }\n\n    for (var j = 0; j < loadBuffertmp.length; j++) {\n      if (loadBuffertmp[j].qj == rs) {\n        loadBuffertmp[j].qj = \"\"\n        loadBuffertmp[j].vj = result\n        setLoadBuffer([...loadBuffertmp])\n      }\n      if (loadBuffertmp[j].qk == rs) {\n        loadBuffertmp[j].qk = \"\"\n        loadBuffertmp[j].vk = result\n        setLoadBuffer([...loadBuffertmp])\n      }\n\n    }\n  }\n\n\n\n  const headerI = [\"OP\", \"Destination\", \"J\", \"K\", \"Issued\", \"RS\", \"Issue Cycle\", \"Execution Begin\", \"Execution End\", \"Write Cycle\"]\n  function renderIHeader() {\n    return headerI.map((key) => {\n      return <th >{key.toUpperCase()}</th>\n    })\n  }\n\n  function renderI() {\n    var isIssued = \"NO\"\n    return instructions.map((station) => {\n      if (station.issued)\n        isIssued = \"YES\"\n      else\n        isIssued = \"NO\"\n      return (\n        <tr key={station.op}>\n          <td>{station.op}</td>\n          <td>{station.destination}</td>\n          <td>{station.j}</td>\n          <td>{station.k}</td>\n          <td>{isIssued}</td>\n          <td>{station.rs}</td>\n          <td>{station.issueCycle}</td>\n          <td>{station.executionBegin}</td>\n          <td>{station.executionEnd}</td>\n          <td>{station.writeCycle}</td>\n        </tr>\n      )\n\n\n\n    })\n  }\n\n\n  //checks if there's a non busy slot in the array\n  function isFull(array) {\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i].busy == 0)\n        return false\n    }\n    return true;\n  }\n\n  //let regj = RF.find(o => o.name === ins.j);\n\n  // function regFind(insReg) {\n  //   for (var i = 0; i < RF.length; i++)\n  //     if (RF.name == insReg)\n  //       return RF[i]\n  // }\n\n\n  function regSet(insReg, qi) {\n    var tmpRF = RF\n    for (var i = 0; i < tmpRF.length; i++)\n      if (tmpRF[i].name == insReg)\n        tmpRF[i].qi = qi\n    setRF([...tmpRF])\n  }\n\n  function regSetData(insReg, data) {\n    var tmpRF = RF\n    for (var i = 0; i < tmpRF.length; i++)\n      if (tmpRF[i].name == insReg) {\n        console.log(\"reg found\")\n        console.log(data)\n        tmpRF[i].data = data\n      }\n    setRF([...tmpRF])\n  }\n\n  function updateRF(registerName, stationName) {\n    var tmpRF = RF\n    for (var i = 0; i < tmpRF.length; i++)\n      if (tmpRF[i].name == registerName) {\n        if (tmpRF[i].qi == stationName) {\n          tmpRF[i].qi = \"\"\n        }\n      }\n    setRF([...tmpRF])\n  }\n\n\n\n  function Tomasulo() {\n\n    //loop on input and initilize instruction array\n    console.log(\"EXEC\")\n    var tmpRSAdd = RSAdd\n    var tmpRSMul = RSMul\n    var loadBuffertmp = loadBuffer\n    var storeBuffertmp = storeBuffer\n    var tmpInstructions = instructions\n    var tmpRF = RF\n\n\n    //execute issued\n    for (var i = 0; i < tmpInstructions.length; i++) {\n      //var ins = tmpInstructions[i]\n      if ((tmpInstructions[i].issued == true) && !tmpInstructions[i].executionBegin) {\n        var station = tmpInstructions[i].rs;\n        if (station.startsWith(\"a\")) {\n          for (var j = 0; j < tmpRSAdd.length; j++)\n            if (tmpRSAdd[j].name == station)\n              if (tmpRSAdd[j].vj != \"\" && tmpRSAdd[j].vk != \"\") {\n                tmpInstructions[i].executionBegin = cycle\n                tmpInstructions[i].executionEnd = cycle + addCycles\n              }\n        }\n        if (station.startsWith(\"m\")) {\n          for (var j = 0; j < tmpRSMul.length; j++)\n            if (tmpRSMul[j].name == station)\n              if (tmpRSMul[j].vj != \"\" && tmpRSMul[j].vk != \"\") {\n                tmpInstructions[i].executionBegin = cycle\n                tmpInstructions[i].executionEnd = cycle + mulCycles\n              }\n        }\n\n        if (station.startsWith(\"s\")) {\n          for (var j = 0; j < storeBuffertmp.length; j++)\n            if (storeBuffertmp[j].name == station){\n              console.log(\"grap\")\n              console.log(storeBuffertmp[j])\n              if (storeBuffertmp[j].vj != \"\" && storeBuffertmp[j].vk != \"\") {\n                console.log(\"STORE READY\")\n                storeBuffertmp[j].a = parseInt(storeBuffertmp[j].offset,10) + parseInt(storeBuffertmp[j].vj,10)\n                console.log(parseInt(storeBuffertmp[j].offset,10))\n\n                tmpInstructions[i].executionBegin = cycle\n                tmpInstructions[i].executionEnd = cycle + loadCycles\n              }\n\n            }\n\n        }\n        if (station.startsWith(\"l\")) {\n          for (var j = 0; j < loadBuffertmp.length; j++)\n            if (loadBuffertmp[j].name == station)\n              if (loadBuffertmp[j].vj != \"\") {\n                console.log(loadBuffertmp[j].offset)\n\n                loadBuffertmp[j].a = parseInt(loadBuffertmp[j].offset, 10) + parseInt(loadBuffertmp[j].vj, 10)\n                console.log(Number.parseInt(loadBuffertmp[j].offset,10))\n                tmpInstructions[i].executionBegin = cycle\n                tmpInstructions[i].executionEnd = cycle + loadCycles\n              }\n        }\n      }\n    }\n    //check finished\n\n    for (var i = 0; i < tmpInstructions.length; i++) {\n      console.log(\"writing \")\n      console.log(\"cycle > parseInt(tmpInstructions[i].executionEnd) \")\n      console.log( cycle > parseInt(tmpInstructions[i].executionEnd))\n      console.log(\" tmpInstructions[i].executionEnd != empty\")\n      console.log( tmpInstructions[i].executionEnd != \"\") \n      console.log(\" tmpInstructions[i].write = empty\")\n      console.log(tmpInstructions[i].writeCycle == \"\")\n      console.log(tmpInstructions[i].op)\n      console.log(tmpInstructions[i].writeCycle)\n      console.log(cycle)\n\n\n      if (cycle > parseInt(tmpInstructions[i].executionEnd) && tmpInstructions[i].executionEnd != \"\" && tmpInstructions[i].writeCycle == \"\") {\n        console.log(\"writing  if\")\n        \n        console.log(tmpInstructions[i])\n        const station = getStation(tmpInstructions[i].rs)\n        console.log(station)\n        const result = getResult(station.op, station.vj, station.vk, station.a)\n        //write in rf, rs\n\n        if(tmpInstructions[i].op!=\"st\")\n          regSetData(tmpInstructions[i].destination, result)\n\n        if(tmpInstructions[i].op!=\"st\")\n          updateRF(tmpInstructions[i].destination, station.name)\n\n        updateRS(station.name, result)\n\n\n        //set write cycle \n        tmpInstructions[i].writeCycle = cycle\n        emptystation(instructions[i].rs)\n        break;\n\n      }\n    }\n    console.log(memory)\n\n    //issuing instruction\n    for (var i = 0; i < tmpInstructions.length; i++) {\n      var ins = tmpInstructions[i]\n      if (ins.issued == false) {\n        //try to issue\n        if ((ins.op == \"add\" || ins.op == \"sub\") && !isFull(tmpRSAdd)) {\n          console.log(\"ADD IF\")\n          tmpInstructions[i].issued = true\n          tmpInstructions[i].issueCycle = cycle\n          for (var j = 0; j < tmpRSAdd.length; j++) {\n            if (tmpRSAdd[j].busy == \"0\") {\n              tmpRSAdd[j].op = ins.op\n              let regj = RF.find(o => o.name === ins.j);\n              let regk = RF.find(o => o.name === ins.k);\n\n              if (regj.qi == \"\") {\n                tmpRSAdd[j].vj = regj.data//what you find in rf value\n              }\n              else {\n                tmpRSAdd[j].qj = regj.qi //what you find in rf qi\n              }\n\n              if (regk.qi == \"\") {\n                tmpRSAdd[j].vk = regk.data//what you find in rf value\n              }\n              else {\n                tmpRSAdd[j].qk = regk.qi //what you find in rf qi\n              }\n              tmpRSAdd[j].busy = \"1\"\n              tmpInstructions[i].rs = tmpRSAdd[j].name\n              console.log(tmpInstructions[i].destination)\n              console.log(tmpRSAdd[j].name)\n              regSet(tmpInstructions[i].destination, tmpRSAdd[j].name)\n              break;\n            }\n          }\n        }\n        if ((ins.op == \"mul\" || ins.op == \"div\") && !isFull(tmpRSMul)) {\n          console.log(\" MUL\")\n          tmpInstructions[i].issued = true\n          tmpInstructions[i].issueCycle = cycle\n          for (var j = 0; j < tmpRSMul.length; j++) {\n            if (tmpRSMul[j].busy == \"0\") {\n              tmpRSMul[j].op = ins.op\n              let regj = RF.find(o => o.name === ins.j);\n              let regk = RF.find(o => o.name === ins.k);\n              if (regj.qi == \"\") {\n                tmpRSMul[j].vj = regj.data//what you find in rf value\n              }\n              else {\n                tmpRSMul[j].qj = regj.qi //what you find in rf qi\n              }\n\n              if (regk.qi == \"\") {\n                tmpRSMul[j].vk = regk.data//what you find in rf value\n              }\n              else {\n                tmpRSMul[j].qk = regk.qi //what you find in rf qi\n              }\n              tmpRSMul[j].busy = \"1\"\n              tmpInstructions[i].rs = tmpRSMul[j].name\n              regSet(tmpInstructions[i].destination, tmpRSMul[j].name)\n              break;\n            }\n          }\n        }\n        if ((ins.op == \"ld\") && !isFull(loadBuffertmp)) {\n          console.log(ins)\n          tmpInstructions[i].issued = true\n          tmpInstructions[i].issueCycle = cycle\n          for (var j = 0; j < loadBuffertmp.length; j++) {\n            if (loadBuffertmp[j].busy == \"0\") {\n              loadBuffertmp[j].op = ins.op\n              let regj = RF.find(o => o.name === ins.j);\n              let regk = RF.find(o => o.name === ins.k);\n              loadBuffertmp[j].offset = ins.offset\n              if (regj.qi == \"\") {\n                loadBuffertmp[j].vj = regj.data//what you find in rf value\n              }\n              else {\n                loadBuffertmp[j].qj = regj.qi //what you find in rf qi\n              }\n  \n              loadBuffertmp[j].busy = \"1\"\n              tmpInstructions[i].rs = loadBuffertmp[j].name\n              regSet(tmpInstructions[i].destination, loadBuffertmp[j].name)\n              break;\n            }\n          }\n        }\n        if ((ins.op == \"st\") && !isFull(storeBuffertmp)) {\n          tmpInstructions[i].issued = true\n          tmpInstructions[i].issueCycle = cycle\n\n          for (var j = 0; j < storeBuffertmp.length; j++) {\n            if (storeBuffertmp[j].busy == \"0\") {\n              storeBuffertmp[j].op = ins.op\n              let regj = RF.find(o => o.name === ins.j);\n              let regk = RF.find(o => o.name === ins.k);\n              storeBuffertmp[j].offset = ins.offset\n\n\n              if (regj.qi == \"\") {\n                storeBuffertmp[j].vj = regj.data//what you find in rf value\n              }\n              else {\n                storeBuffertmp[j].qj = regj.qi //what you find in rf qi\n              }\n\n              if (regk.qi == \"\") {\n                storeBuffertmp[j].vk = regk.data//what you find in rf value\n              }\n              else {\n                storeBuffertmp[j].qk = regk.qi //what you find in rf qi\n              }\n\n              storeBuffertmp[j].busy = \"1\"\n              tmpInstructions[i].rs = storeBuffertmp[j].name\n\n              break;\n\n            }\n          }\n\n        }\n        break;\n      }\n\n    }\n\n    console.log(tmpRSAdd)\n    setRSAdd([...tmpRSAdd])\n    setRSMul([...tmpRSMul])\n    setInstructions([...tmpInstructions])\n    setLoadBuffer([...loadBuffertmp])\n    setStoreBuffer([...storeBuffertmp])\n    var nextCycle = cycle + 1\n    console.log(nextCycle)\n    setCycle(nextCycle)\n    setRF([...tmpRF])\n\n  }\n\n  const header = [\"Name\", \"OP\", \"Vj\", \"Vk\", \"Qj\", \"Qk\", \"A\", \"Busy\"]\n  function renderAddHeader() {\n    return header.map((key) => {\n      return <th >{key.toUpperCase()}</th>\n    })\n  }\n\n  function renderRSAdd() {\n    return RSAdd.map((station) => {\n\n      return (\n        <tr key={station.name}>\n          <td>{station.name}</td>\n          <td>{station.op}</td>\n          <td>{station.vj}</td>\n          <td>{station.vk}</td>\n          <td>{station.qj}</td>\n          <td>{station.qk}</td>\n          <td>{station.a}</td>\n          <td>{station.busy}</td>\n\n\n        </tr>\n      )\n\n\n\n    })\n  }\n\n  function renderRSMul() {\n    return RSMul.map((station) => {\n\n      return (\n        <tr key={station.name}>\n          <td>{station.name}</td>\n          <td>{station.op}</td>\n          <td>{station.vj}</td>\n          <td>{station.vk}</td>\n          <td>{station.qj}</td>\n          <td>{station.qk}</td>\n          <td>{station.a}</td>\n          <td>{station.busy}</td>\n\n\n        </tr>\n      )\n\n\n\n    })\n  }\n  const headerRF = [\"Name\", \"Qi\", \"Data\"]\n  function renderRFHeader() {\n    return headerRF.map((key) => {\n      return <th >{key.toUpperCase()}</th>\n    })\n  }\n\n  function renderRF() {\n    return RF.map((station) => {\n\n      return (\n        <tr key={station.name}>\n          <td>{station.name}</td>\n          <td>{station.qi}</td>\n          <td>{station.data}</td>\n\n\n\n        </tr>\n      )\n    })\n  }\n\n  const headerL = [\"Name\", \"vJ\", \"Qj\", \"A\", \"Offset\", \"Busy\"]\n  function renderLHeader() {\n    return headerL.map((key) => {\n      return <th >{key.toUpperCase()}</th>\n    })\n  }\n  function renderLoad() {\n    return loadBuffer.map((station) => {\n      return (\n        <tr key={station.name}>\n          <td>{station.name}</td>\n          <td>{station.vj}</td>\n          <td>{station.qj}</td>\n          <td>{station.a}</td>\n          <td>{station.offset}</td>\n          <td>{station.busy}</td>\n        </tr>\n      )\n    })\n  }\n  function rendertom() {\n    setNotReady(false)\n  \n  }\n\n  const headerS = [\"Name\", \"vJ\", \"vk\", \"Qj\", \"Qk\", \"A\", \"Offset\", \"Busy\"]\n  function renderSHeader() {\n    return headerS.map((key) => {\n      return <th >{key.toUpperCase()}</th>\n    })\n  }\n  function renderStore() {\n    return storeBuffer.map((station) => {\n      console.log(station.offset)\n      return (\n        <tr key={station.name}>\n          <td>{station.name}</td>\n          <td>{station.vj}</td>\n          <td>{station.vk}</td>\n          <td>{station.qj}</td>\n          <td>{station.qk}</td>\n          <td>{station.a}</td>\n          <td>{station.offset + \" \"}</td>\n          <td>{station.busy}</td>\n        </tr>\n      )\n    })\n  }\n  function addInstruction() {\n    console.log(\"offset\")\n    console.log(  offsetInputRef.current.value      )\n    var tmpInstructions = instructions\n    if(op==\"ld\"|| op==\"st\"){\n      \n      tmpInstructions.push({\n        op:op,\n        destination: destination,\n        j:j,\n        k:k,\n        issued:false,\n        rs:\"\",\n        issueCycle:\"\",\n        executionBegin:\"\",\n        executionEnd:\"\",\n        writeCycle:\"\",\n        offset: offsetInputRef.current.value\n    })\n    console.log(tmpInstructions)\n\n\n    }\n\n\n    else  \n    tmpInstructions.push({\n        op:op,\n        destination: destination,\n        j:j,\n        k:k,\n        issued:false,\n        rs:\"\",\n        issueCycle:\"\",\n        executionBegin:\"\",\n        executionEnd:\"\",\n        writeCycle:\"\"\n    })\n    setInstructions([...tmpInstructions])\n }\n\n\n  if (notReady) {\n    return (\n      <div>\n        <div className=\"wrap-input100 validate-input\">\n          &emsp;<label for=\"cars\">Op</label>&emsp;\n<select className=\"dropbtn\" required=\"required\" onChange={chooseOP}>\n<option value=\"\">choose</option>\n            <option value=\"add\">Add</option>\n            <option  value=\"sub\" >Sub</option>\n            <option value=\"mul\" >Mult</option>\n            <option  value=\"div\" >Divide</option>\n            <option  value=\"ld\" >Load</option>\n            <option  value=\"st\" >Store</option>\n          </select>\n          <span className=\"focus-input100\"></span>\n          <span className=\"symbol-input100\">\n          </span>\n        </div>\n\n        <div className=\"wrap-input100 validate-input\">\n          &emsp;<label for=\"cars\">destination $</label>&emsp;\n<select className=\"dropbtn\" id=\"cars\" required=\"required\" onChange={chooseDestination}>\n<option value=\"\">choose</option>\n            <option value=\"r1\">R1</option>\n            <option value=\"r2\" >R2</option>\n            <option value=\"r3\" >R3</option>\n            <option value=\"r4\" >R4</option>\n            <option value=\"r5\" >R5</option>\n          </select>\n        </div>\n\n        <div className=\"wrap-input100 validate-input\">\n          &emsp;<label for=\"cars\">Op1 $</label>&emsp;\n<select className=\"dropbtn\" id=\"cars\" required=\"required\" onChange={choosej}>\n<option value=\"\">choose</option>\n            <option value=\"r1\">R1</option>\n            <option value=\"r2\" >R2</option>\n            <option value=\"r3\" >R3</option>\n            <option value=\"r4\" >R4</option>\n            <option value=\"r5\" >R5</option>\n          </select>\n        </div>\n        <div className=\"wrap-input100 validate-input\">\n          &emsp;<label for=\"cars\">Op2 $</label>&emsp;\n<select className=\"dropbtn\" id=\"cars\" required=\"required\" onChange={choosek}>\n            <option value=\"\">choose</option>\n            <option value=\"r1\">R1</option>\n            <option value=\"r2\" >R2</option>\n            <option value=\"r3\" >R3</option>\n            <option value=\"r4\" >R4</option>\n            <option value=\"r5\" >R5</option>\n          </select>\n        </div>\n        <label>Offset (if load or store):</label>\n        <input type=\"number\" min=\"0\" max=\"10\" ref={offsetInputRef}></input>  <br/><br/>\n        <button className=\"btn\" onClick={addInstruction}> Add Instruction </button> &emsp; &emsp;\n        <button  className=\"btn\" onClick={rendertom}> start execution</button>  <br/>\n       \n      <div>\n        <h1 id='title'>Instructions</h1>\n          <table id='requests'>\n            <tbody>\n              <tr>{renderIHeader()}</tr>\n              {renderI()}\n            </tbody>\n          </table>\n          </div>\n\n      </div>\n    )\n  }\n\n  //update register file remove qi\n\n  else\n    return (\n      <div className=\"App\">\n        <button className=\"btn\" onClick={Tomasulo}> Next Cycle </button>\n        <h3>{cycle - 1}</h3>\n        <div class=\"limiter\">\n          <h1 id='title'>Instructions</h1>\n          <table id='requests'>\n            <tbody>\n              <tr>{renderIHeader()}</tr>\n              {renderI()}\n            </tbody>\n          </table>\n\n          <h1 id='title'>Add Station </h1>\n          <table id='requests'>\n            <tbody>\n              <tr>{renderAddHeader()}</tr>\n              {renderRSAdd()}\n            </tbody>\n          </table>\n\n          <h1 id='title'>Multiply Station </h1>\n          <table id='requests'>\n            <tbody>\n              <tr>{renderAddHeader()}</tr>\n              {renderRSMul()}\n            </tbody>\n          </table>\n\n          <h1 id='title'>Load Buffer</h1>\n          <table id='requests'>\n            <tbody>\n              <tr>{renderLHeader()}</tr>\n              {renderLoad()}\n            </tbody>\n          </table>\n          <h1 id='title'>Store Buffer</h1>\n          <table id='requests'>\n            <tbody>\n              <tr>{renderSHeader()}</tr>\n              {renderStore()}\n            </tbody>\n          </table>\n\n\n\n          <h1 id='title'>Register File</h1>\n          <table id='requests'>\n            <tbody>\n              <tr>{renderRFHeader()}</tr>\n              {renderRF()}\n            </tbody>\n          </table>\n\n\n\n\n        </div>\n      </div>\n    );\n\n}\n\nexport default App;\n\n\n\n\n\n\n\n",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":271,"column":5,"nodeType":"107","messageId":"108","endLine":280,"endColumn":6},{"ruleId":"109","severity":1,"message":"110","line":305,"column":27,"nodeType":"111","messageId":"112","endLine":305,"endColumn":29},{"ruleId":"113","severity":1,"message":"114","line":321,"column":16,"nodeType":"115","messageId":"116","endLine":321,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":322,"column":30,"nodeType":"111","messageId":"112","endLine":322,"endColumn":32},{"ruleId":"113","severity":1,"message":"114","line":339,"column":16,"nodeType":"115","messageId":"116","endLine":339,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":340,"column":36,"nodeType":"111","messageId":"112","endLine":340,"endColumn":38},{"ruleId":"113","severity":1,"message":"114","line":357,"column":16,"nodeType":"115","messageId":"116","endLine":357,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":358,"column":35,"nodeType":"111","messageId":"112","endLine":358,"endColumn":37},{"ruleId":"109","severity":1,"message":"110","line":382,"column":27,"nodeType":"111","messageId":"112","endLine":382,"endColumn":29},{"ruleId":"113","severity":1,"message":"114","line":391,"column":16,"nodeType":"115","messageId":"116","endLine":391,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":392,"column":27,"nodeType":"111","messageId":"112","endLine":392,"endColumn":29},{"ruleId":"113","severity":1,"message":"114","line":398,"column":16,"nodeType":"115","messageId":"116","endLine":398,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":399,"column":33,"nodeType":"111","messageId":"112","endLine":399,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":405,"column":16,"nodeType":"115","messageId":"116","endLine":405,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":406,"column":32,"nodeType":"111","messageId":"112","endLine":406,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":423,"column":26,"nodeType":"111","messageId":"112","endLine":423,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":429,"column":26,"nodeType":"111","messageId":"112","endLine":429,"endColumn":28},{"ruleId":"113","severity":1,"message":"114","line":440,"column":14,"nodeType":"115","messageId":"116","endLine":440,"endColumn":15},{"ruleId":"109","severity":1,"message":"110","line":441,"column":26,"nodeType":"111","messageId":"112","endLine":441,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":446,"column":26,"nodeType":"111","messageId":"112","endLine":446,"endColumn":28},{"ruleId":"113","severity":1,"message":"114","line":455,"column":14,"nodeType":"115","messageId":"116","endLine":455,"endColumn":15},{"ruleId":"109","severity":1,"message":"110","line":456,"column":32,"nodeType":"111","messageId":"112","endLine":456,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":461,"column":32,"nodeType":"111","messageId":"112","endLine":461,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":469,"column":14,"nodeType":"115","messageId":"116","endLine":469,"endColumn":15},{"ruleId":"109","severity":1,"message":"110","line":470,"column":31,"nodeType":"111","messageId":"112","endLine":470,"endColumn":33},{"ruleId":"109","severity":1,"message":"110","line":475,"column":31,"nodeType":"111","messageId":"112","endLine":475,"endColumn":33},{"ruleId":"109","severity":1,"message":"110","line":525,"column":25,"nodeType":"111","messageId":"112","endLine":525,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":543,"column":25,"nodeType":"111","messageId":"112","endLine":543,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":551,"column":25,"nodeType":"111","messageId":"112","endLine":551,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":562,"column":25,"nodeType":"111","messageId":"112","endLine":562,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":563,"column":25,"nodeType":"111","messageId":"112","endLine":563,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":587,"column":38,"nodeType":"111","messageId":"112","endLine":587,"endColumn":40},{"ruleId":"109","severity":1,"message":"110","line":591,"column":34,"nodeType":"111","messageId":"112","endLine":591,"endColumn":36},{"ruleId":"109","severity":1,"message":"117","line":592,"column":34,"nodeType":"111","messageId":"112","endLine":592,"endColumn":36},{"ruleId":"109","severity":1,"message":"117","line":592,"column":58,"nodeType":"111","messageId":"112","endLine":592,"endColumn":60},{"ruleId":"113","severity":1,"message":"114","line":598,"column":20,"nodeType":"115","messageId":"116","endLine":598,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":599,"column":34,"nodeType":"111","messageId":"112","endLine":599,"endColumn":36},{"ruleId":"109","severity":1,"message":"117","line":600,"column":34,"nodeType":"111","messageId":"112","endLine":600,"endColumn":36},{"ruleId":"109","severity":1,"message":"117","line":600,"column":58,"nodeType":"111","messageId":"112","endLine":600,"endColumn":60},{"ruleId":"113","severity":1,"message":"114","line":607,"column":20,"nodeType":"115","messageId":"116","endLine":607,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":608,"column":40,"nodeType":"111","messageId":"112","endLine":608,"endColumn":42},{"ruleId":"109","severity":1,"message":"117","line":611,"column":40,"nodeType":"111","messageId":"112","endLine":611,"endColumn":42},{"ruleId":"109","severity":1,"message":"117","line":611,"column":70,"nodeType":"111","messageId":"112","endLine":611,"endColumn":72},{"ruleId":"113","severity":1,"message":"114","line":624,"column":20,"nodeType":"115","messageId":"116","endLine":624,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":625,"column":39,"nodeType":"111","messageId":"112","endLine":625,"endColumn":41},{"ruleId":"109","severity":1,"message":"117","line":626,"column":39,"nodeType":"111","messageId":"112","endLine":626,"endColumn":41},{"ruleId":"113","severity":1,"message":"118","line":639,"column":14,"nodeType":"115","messageId":"116","endLine":639,"endColumn":15},{"ruleId":"109","severity":1,"message":"117","line":644,"column":52,"nodeType":"111","messageId":"112","endLine":644,"endColumn":54},{"ruleId":"109","severity":1,"message":"110","line":646,"column":49,"nodeType":"111","messageId":"112","endLine":646,"endColumn":51},{"ruleId":"109","severity":1,"message":"117","line":652,"column":96,"nodeType":"111","messageId":"112","endLine":652,"endColumn":98},{"ruleId":"109","severity":1,"message":"110","line":652,"column":135,"nodeType":"111","messageId":"112","endLine":652,"endColumn":137},{"ruleId":"109","severity":1,"message":"117","line":661,"column":33,"nodeType":"111","messageId":"112","endLine":661,"endColumn":35},{"ruleId":"109","severity":1,"message":"117","line":664,"column":33,"nodeType":"111","messageId":"112","endLine":664,"endColumn":35},{"ruleId":"113","severity":1,"message":"118","line":680,"column":14,"nodeType":"115","messageId":"116","endLine":680,"endColumn":15},{"ruleId":"109","severity":1,"message":"110","line":682,"column":22,"nodeType":"111","messageId":"112","endLine":682,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":684,"column":21,"nodeType":"111","messageId":"112","endLine":684,"endColumn":23},{"ruleId":"109","severity":1,"message":"110","line":684,"column":40,"nodeType":"111","messageId":"112","endLine":684,"endColumn":42},{"ruleId":"113","severity":1,"message":"114","line":688,"column":20,"nodeType":"115","messageId":"116","endLine":688,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":689,"column":34,"nodeType":"111","messageId":"112","endLine":689,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":691,"column":34,"nodeType":"121","messageId":"122","endLine":691,"endColumn":55},{"ruleId":"119","severity":1,"message":"120","line":692,"column":34,"nodeType":"121","messageId":"122","endLine":692,"endColumn":55},{"ruleId":"109","severity":1,"message":"110","line":694,"column":27,"nodeType":"111","messageId":"112","endLine":694,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":701,"column":27,"nodeType":"111","messageId":"112","endLine":701,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":716,"column":21,"nodeType":"111","messageId":"112","endLine":716,"endColumn":23},{"ruleId":"109","severity":1,"message":"110","line":716,"column":40,"nodeType":"111","messageId":"112","endLine":716,"endColumn":42},{"ruleId":"113","severity":1,"message":"114","line":720,"column":20,"nodeType":"115","messageId":"116","endLine":720,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":721,"column":34,"nodeType":"111","messageId":"112","endLine":721,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":723,"column":34,"nodeType":"121","messageId":"122","endLine":723,"endColumn":55},{"ruleId":"119","severity":1,"message":"120","line":724,"column":34,"nodeType":"121","messageId":"122","endLine":724,"endColumn":55},{"ruleId":"109","severity":1,"message":"110","line":725,"column":27,"nodeType":"111","messageId":"112","endLine":725,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":732,"column":27,"nodeType":"111","messageId":"112","endLine":732,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":745,"column":21,"nodeType":"111","messageId":"112","endLine":745,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":749,"column":20,"nodeType":"115","messageId":"116","endLine":749,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":750,"column":39,"nodeType":"111","messageId":"112","endLine":750,"endColumn":41},{"ruleId":"119","severity":1,"message":"120","line":752,"column":34,"nodeType":"121","messageId":"122","endLine":752,"endColumn":55},{"ruleId":"123","severity":1,"message":"124","line":753,"column":19,"nodeType":"115","messageId":"125","endLine":753,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":753,"column":34,"nodeType":"121","messageId":"122","endLine":753,"endColumn":55},{"ruleId":"109","severity":1,"message":"110","line":755,"column":27,"nodeType":"111","messageId":"112","endLine":755,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":769,"column":21,"nodeType":"111","messageId":"112","endLine":769,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":773,"column":20,"nodeType":"115","messageId":"116","endLine":773,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":774,"column":40,"nodeType":"111","messageId":"112","endLine":774,"endColumn":42},{"ruleId":"119","severity":1,"message":"120","line":776,"column":34,"nodeType":"121","messageId":"122","endLine":776,"endColumn":55},{"ruleId":"119","severity":1,"message":"120","line":777,"column":34,"nodeType":"121","messageId":"122","endLine":777,"endColumn":55},{"ruleId":"109","severity":1,"message":"110","line":781,"column":27,"nodeType":"111","messageId":"112","endLine":781,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":788,"column":27,"nodeType":"111","messageId":"112","endLine":788,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":949,"column":10,"nodeType":"111","messageId":"112","endLine":949,"endColumn":12},{"ruleId":"109","severity":1,"message":"110","line":949,"column":21,"nodeType":"111","messageId":"112","endLine":949,"endColumn":23},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'j' is already defined.","Identifier","redeclared","Expected '!==' and instead saw '!='.","'i' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'ins'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'regk' is assigned a value but never used.","unusedVar","no-global-assign","no-unsafe-negation"]